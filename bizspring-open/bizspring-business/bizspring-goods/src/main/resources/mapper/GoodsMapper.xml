<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.bizspring.cloud.goods.admin.mapper.GoodsMapper">

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="cn.bizspring.cloud.goods.common.entity.Goods">
	    <result column="id" property="id" />
	    <result column="version" property="version" />
        <result column="created_time" property="createdTime" />
        <result column="updated_time" property="updatedTime" />
        <result column="caption" property="caption" />
        <result column="cost" property="cost" />
        <result column="introduction" property="introduction" />
        <result column="is_active" property="isActive" />
        <result column="is_delivery" property="isDelivery" />
        <result column="is_list" property="isList" />
        <result column="is_marketable" property="isMarketable" />
        <result column="is_top" property="isTop" />
        <result column="keyword" property="keyword" />
        <result column="market_price" property="marketPrice" />
        <result column="remark" property="remark" />
        <result column="name" property="name" />
        <result column="price" property="price" />
        <result column="goods_images" property="goodsImages" jdbcType="LONGVARCHAR"
				javaType="java.util.ArrayList" typeHandler="cn.bizspring.cloud.goods.admin.handler.GoodsImageHandler" />
        <result column="sn" property="sn" />
        <result column="specification_items" property="specificationItems" jdbcType="LONGVARCHAR"
				javaType="java.util.ArrayList" typeHandler="cn.bizspring.cloud.goods.admin.handler.SpecificationItemConverter"/>
        <result column="total_score" property="totalScore" />
        <result column="unit" property="unit" />
        <result column="weight" property="weight" />
		<result column="store_id" property="storeId"  />
		<result column="store_name" property="storeName"  />
		<result column="goods_category_id" property="goodsCategoryId"  />
		<result column="goods_category_name" property="goodsCategoryName"  />
		<result column="store_goods_category_id" property="storeGoodsCategoryId" />
		<result column="brand_id"  property="brandId"  />
    </resultMap>

	<!-- 通用查询结果列 -->
	<sql id="Base_Column_List">
		goods.id,
        goods.version,
        goods.created_time, goods.updated_time,  goods.caption, goods.cost,goods.introduction, goods.is_active, goods.is_delivery, goods.is_list, goods.is_marketable, goods.is_top, goods.keyword, goods.market_price, goods.remark,goods.name, goods.price, goods.goods_images, goods.sn, goods.specification_items, goods.unit, goods.weight, goods.brand_id, goods.goods_category_id, goods.store_id, goods.store_goods_category_id, 'goods_id'
	</sql>

	<!-- 查找实体对象 -->
	<select id="find" parameterType="java.lang.String" resultMap="BaseResultMap">
		SELECT
		<include refid="Base_Column_List"></include>
		FROM
		`biz_goods` goods
		WHERE
		`id` = #{id}
	</select>

	<!-- 查找所有实体对象集合 -->
	<select id="findAll" resultMap="BaseResultMap" >
		SELECT
		<include refid="Base_Column_List"></include>
		FROM
		`biz_goods` goods
	</select>



	<!-- 查找所有实体对象集合 -->
	<select id="findAllByEntity" resultMap="BaseResultMap">
		SELECT
		<include refid="Base_Column_List"></include>
		FROM
		`biz_goods` goods
		<where>
			<if test="null != entity ">
				<if test=" null != entity.storeGoodsCategoryId ">
					AND goods.store_goods_category_id = #{entity.storeGoodsCategoryId}
				</if>
			</if>
			<if test="null != entity ">
				<if test=" null != entity.goodsCategoryId ">
					AND goods.goods_category_id = #{entity.goodsCategoryId}
				</if>
			</if>
		</where>
	</select>


	<!-- 查找实体对象集合 -->
	<select id="findSet" resultType="cn.bizspring.cloud.goods.common.entity.Goods">
		SELECT
		<include refid="Base_Column_List"></include>
		FROM
		`biz_goods` goods
		<choose>
			<when test="propertyName == 'brand_id'">
				WHERE
				brand_id = #{propertyValue}
			</when>
			<otherwise>
				WHERE
				${propertyName} = #{propertyValue}
			</otherwise>
		</choose>
	</select>

	<!-- 查找商品 -->
	<select id="findByWrapperList" resultMap="BaseResultMap">
		SELECT
		<include refid="Base_Column_List"></include>
		FROM
		`biz_goods` goods
		<where>
			<if test="store != null">
				AND goods.store_id = #{store.id}
			</if>
			<if test="goodsCategory != null">
				AND goods.goods_category_id IN (SELECT id FROM biz_goods_category WHERE id = #{goodsCategory.id} OR tree_path LIKE concat('%,',#{goodsCategory.id},',%'))
			</if>
			<if test="brand != null">
				AND goods.brand_id = #{brand.id}
			</if>
			<if test="startPrice != null and startPrice >= 0">
				AND goods.price <![CDATA[ >= ]]> #{startPrice}
			</if>
			<if test="endPrice != null and endPrice >= 0">
				AND goods.price <![CDATA[ <= ]]> #{endPrice}
			</if>
			<if test="isMarketable != null">
				AND goods.is_marketable = #{isMarketable}
			</if>
			<if test="isList != null">
				AND goods.is_list = #{isList}
			</if>
			<if test="isTop != null">
				AND goods.is_top = #{isTop}
			</if>
			<if test="isActive != null">
				AND goods.is_active = #{isActive}
			</if>
			<if test="isOutOfStock != null">
				<if test="isOutOfStock == true">
					AND (EXISTS(SELECT id FROM biz_sku WHERE goods_id = goods.id AND stock <![CDATA[ <= ]]> allocated_stock))
				</if>
				<if test="isOutOfStock == false">
					AND (EXISTS(SELECT id FROM biz_sku WHERE goods_id = goods.id AND stock <![CDATA[ > ]]> allocated_stock))
				</if>
			</if>
			<if test="isStockAlert != null">
				<if test="isStockAlert == true">
					AND (EXISTS(SELECT id FROM biz_sku WHERE goods_id = goods.id AND stock <![CDATA[ <= ]]> allocated_stock + 5))
				</if>
				<if test="isStockAlert == false">
					AND (EXISTS(SELECT id FROM biz_sku WHERE goods_id = goods.id AND stock <![CDATA[ > ]]> allocated_stock + 5))
				</if>
			</if>
			<if test="orderType != null">
				<choose>
					<when test="orderType.name == 'TOP_DESC'">
						ORDER BY goods.is_top DESC
					</when>
					<when test="orderType.name == 'PRICE_ASC'">
						ORDER BY goods.price ASC
					</when>
					<when test="orderType.name == 'PRICE_DESC'">
						ORDER BY goods.price DESC
					</when>
					<when test="orderType.name == 'DATE_DESC'">
						ORDER BY goods.created_time DESC
					</when>
				</choose>
			</if>
			<if test="queryWrapper.nonEmptyOfWhere == true">
				AND
			</if>
			${queryWrapper.sqlSegment}
		</where>
	</select>


	<!-- 查找商品 -->
	<select id="findList" resultMap="BaseResultMap">
		SELECT
		<include refid="Base_Column_List"></include>
		FROM
		`biz_goods` goods
		<where>
			<if test="goodsCategory != null">
				AND goods.goods_category_id IN (SELECT id FROM biz_goods_category WHERE id = #{goodsCategory.id} OR tree_path LIKE concat('%,',#{goodsCategory.id},',%'))
			</if>
			<if test="isMarketable != null">
				AND goods.is_marketable = #{isMarketable}
			</if>
			<if test="isActive != null">
				AND goods.is_active = #{isActive}
			</if>
			<if test="beginDate != null">
				AND created_time <![CDATA[ >= ]]> #{beginDate}
			</if>
			<if test="endDate != null">
				AND created_time <![CDATA[ <= ]]> #{endDate}
			</if>
			<if test="orderType != null">
				<choose>
					<when test="orderType.name == 'topDesc'">
						ORDER BY is_top, goods.created_time DESC
					</when>
					<when test="orderType.name == 'priceAsc'">
						ORDER BY price, goods.created_time ASC
					</when>
					<when test="orderType.name == 'priceDesc'">
						ORDER BY price, goods.created_time DESC
					</when>
					<when test="orderType.name == 'dateDesc'">
						ORDER BY goods.created_time DESC
					</when>
				</choose>
			</if>
			<if test="first != null and count != null">
				LIMIT ${first}, ${count}
			</if>
		</where>
	</select>

	<select id="findSelectionList" resultMap="BaseResultMap">
		SELECT
		<include refid="Base_Column_List"></include>
		FROM
		`biz_goods` goods
		WHERE
		goods.is_marketable = true
		AND goods.is_list = true
		<if test="store != null">
			AND	store_id = #{store.id}
		</if>
		<if test="count != null">
			LIMIT 0, ${count}
		</if>
	</select>

	<!-- 排名类型查找商品 -->
	<select id="findByRankingTypeList" resultMap="BaseResultMap">
		SELECT
		<include refid="Base_Column_List"></include>
		FROM
		`biz_goods` goods
		WHERE
		1 = 1
		<if test="store != null">
			AND	store_id = #{store.id}
		</if>
		<if test="count != null">
			LIMIT 0, ${count}
		</if>
	</select>

	<!-- 查找商品分页 -->
	<select id="findPage" resultMap="BaseResultMap">
		SELECT
		<include refid="Base_Column_List"></include>
		<if test="null != stores and stores.size() > 0">
			,store_name
		</if>
			,goodsCategory.name as goods_category_name
		FROM
		`biz_goods` goods
		LEFT JOIN `biz_goods_category` goodsCategory ON goods.goods_category_id = goodsCategory.id
		<if test="null != stores and stores.size() > 0">
			left join (
				select a.item_id,a.store_name from (
				<foreach collection="stores" item="item" index="index" separator="union all">
					select #{item.id} as item_id,#{item.name} as store_name
					from dual
				</foreach>
				) as a
			) as aa on aa.item_id=goods.store_id
		</if>
		<!-- 商品标签 -->
		WHERE 1 = 1
		<if test="stores!= null and stores.size() > 0">
			and exists (
				select 1 from (
				<foreach collection="stores" item="item" index="index" separator="union all">
					select #{item.id} as item_id
					from dual
				</foreach>
				) a where a.item_id=goods.store_id
			)
		</if>
		<if test="store != null">
			AND goods.store_id = #{store.id}
		</if>
		<if test="null != goodsCategory">
			AND goods_category_id IN(SELECT id FROM biz_goods_category WHERE id = #{goodsCategory.id} OR tree_path LIKE concat('%,', #{goodsCategory.id}, ',%'))
		</if>
		<if test="brand != null">
			AND brand_id = #{brand.id}
		</if>
		<if test="sn != null">
			AND sn = #{sn}
		</if>
		<if test="name != null">
			AND goods.`name` like  concat('%',#{name},'%')
		</if>
		<if test="keyword != null">
			AND goods.`keyword` like  concat('%',#{keyword},'%')
		</if>

		<if test="startPrice != null and startPrice >= 0">
			AND price <![CDATA[ >= ]]> #{startPrice}
		</if>
		<if test="endPrice != null and endPrice >= 0">
			AND price <![CDATA[ <= ]]> #{endPrice}
		</if>
		<if test="isMarketable != null">
			AND is_marketable = #{isMarketable}
		</if>
		<if test="isList != null">
			AND is_list = #{isList}
		</if>
		<if test="isTop != null">
			AND is_top = #{isTop}
		</if>
		<if test="isActive != null">
			AND is_active = #{isActive}
		</if>
		<if test="isOutOfStock != null">
			<if test="isOutOfStock == true">
				AND (EXISTS(SELECT id FROM biz_sku WHERE goods_id = goods.id AND stock <![CDATA[ <= ]]> allocated_stock))
			</if>
			<if test="isOutOfStock == false">
				AND (EXISTS(SELECT id FROM biz_sku WHERE goods_id = goods.id AND stock <![CDATA[ > ]]> allocated_stock))
			</if>
		</if>
		<if test="isStockAlert != null">
			<if test="isStockAlert == true">
				AND (EXISTS(SELECT id FROM biz_sku WHERE goods_id = goods.id AND stock <![CDATA[ <= ]]> allocated_stock + 5))
			</if>
			<if test="isStockAlert == false">
				AND (EXISTS(SELECT id FROM biz_sku WHERE goods_id = goods.id AND stock <![CDATA[ > ]]> allocated_stock + 5))
			</if>
		</if>
		<if test="orderType != null">
			<choose>
				<when test="orderType.name == 'TOP_DESC'">
					ORDER BY is_top DESC
				</when>
				<when test="orderType.name == 'PRICE_ASC'">
					ORDER BY price ASC
				</when>
				<when test="orderType.name == 'PRICE_DESC'">
					ORDER BY price DESC
				</when>
				<when test="orderType.name == 'DATE_DESC'">
					ORDER BY goods.created_time DESC
				</when>
			</choose>
		</if>

		<if test="queryWrapper.nonEmptyOfWhere == true">
			AND
		</if>
		${queryWrapper.sqlSegment}
	</select>

	<!-- 查询商品数量 -->
	<select id="count" resultType="long">
		SELECT
		count(1)
		FROM
		`biz_goods` goods
		<where>
			<if test="store != null">
				AND store_id = #{store.id}
			</if>
			<if test="isMarketable != null">
				AND is_marketable = #{isMarketable}
			</if>
			<if test="isList != null">
				AND is_list != #{isList}
			</if>
			<if test="isTop != null">
				AND is_top = #{isTop}
			</if>
			<if test="isActive != null">
				AND is_active = #{isActive}
			</if>
			<if test="isOutOfStock != null">
				<if test="isOutOfStock == true">
					AND (EXISTS(SELECT id FROM biz_sku WHERE goods_id = goods.id AND stock <![CDATA[ <= ]]> allocated_stock))
				</if>
				<if test="isOutOfStock == false">
					AND (EXISTS(SELECT id FROM biz_sku WHERE goods_id = goods.id AND stock <![CDATA[ > ]]> allocated_stock))
				</if>
			</if>
			<if test="isStockAlert != null">
				<if test="isStockAlert == true">
					AND (EXISTS(SELECT id FROM biz_sku WHERE goods_id = goods.id AND stock <![CDATA[ <= ]]> allocated_stock + 5))
				</if>
				<if test="isStockAlert == false">
					AND (EXISTS(SELECT id FROM biz_sku WHERE goods_id = goods.id AND stock <![CDATA[ > ]]> allocated_stock + 5))
				</if>
			</if>
		</where>
	</select>

	<!-- 刷新商品有效状态 -->
	<update id="refreshActiveValid">
		<!-- 设置商品有效状态 -->
		<if test="store != null">
			UPDATE biz_goods
			SET is_active = 1
			WHERE
			is_active = 0
			AND store_id = #{store.id}
			--商品分类在这个店铺的商品分类中  这个店关联的一堆商品分类的，在这里循环
			<if test="null != goodsCategoryStores and goodsCategoryStores.size() > 0">
				and exists (
					select 1 from (
					<foreach collection="goodsCategoryStores" item="item" index="index" separator="union all">
						select #{item.id} as item_id
						from dual
					</foreach>
					) a where a.item_id=goods.goods_category_id
				)
			</if>
		</if>
	</update>
	<!-- 刷新商品无效状态 -->
	<update id="refreshActiveInValid">
		<!-- 设置商品无效状态 -->
		<if test="store != null">
			UPDATE biz_goods
			SET is_active = 0
			WHERE
			is_active = 1
			AND store_id = #{store.id}
			--商品分类在这个店铺的商品分类中  这个店关联的一堆商品分类的，在这里循环
			<if test="null != goodsCategoryStores and goodsCategoryStores.size() > 0">
				and exists (
				select 1 from (
				<foreach collection="goodsCategoryStores" item="item" index="index" separator="union all">
					select #{item.id} as item_id
					from dual
				</foreach>
				) a where a.item_id=goods.goods_category_id
				)
			</if>
		</if>
	</update>


	<!-- 判断是否存在 -->
	<select id="exists" resultType="boolean">
		SELECT
			COUNT(1)
		FROM
			`biz_goods`
		WHERE
			${propertyName} = #{propertyValue}
	</select>

	<!-- 保存 -->
	<insert id="save" parameterType="cn.bizspring.cloud.goods.common.entity.Goods">

		INSERT INTO biz_goods(
		id ,
		created_time ,
		version ,
		caption ,
		cost ,
		is_active ,
		is_delivery ,
		is_list ,
		is_marketable ,
		is_top ,
		keyword ,
		market_price ,
		remark ,
		`name` ,
		price ,
		goods_images ,
		sn ,
		specification_items ,
		unit ,
		weight ,
		brand_id ,
		goods_category_id ,
		store_id ,
		store_goods_category_id ,
		introduction
		) VALUES (
		#{entity.id},
		#{entity.createdTime},
		#{entity.version},
		#{entity.caption},
		#{entity.cost},
		#{entity.isActive},
		#{entity.isDelivery},
		#{entity.isList},
		#{entity.isMarketable},
		#{entity.isTop},
		#{entity.keyword},
		#{entity.marketPrice},
		#{entity.remark},
		#{entity.name},
		#{entity.price},
		#{entity.goodsImages, typeHandler=cn.bizspring.cloud.goods.admin.handler.GoodsImageHandler},
		#{entity.sn},
		#{entity.specificationItems, typeHandler=cn.bizspring.cloud.goods.admin.handler.SpecificationItemConverter},
		#{entity.unit},
		#{entity.weight},
		#{entity.brandId},
		#{entity.goodsCategoryId},
		#{entity.storeId},
		#{entity.storeGoodsCategoryId},
		#{entity.introduction}
		);

	</insert>

	<!-- 更新 -->
	<update id="update" parameterType="cn.bizspring.cloud.goods.common.entity.Goods">
		UPDATE biz_goods
		SET updated_time = #{entity.updatedTime},
		version = #{entity.version} + 1,
		caption = #{entity.caption},
		cost = #{entity.cost},
		is_active = #{entity.isActive},
		is_delivery = #{entity.isDelivery},
		is_list = #{entity.isList},
		is_marketable = #{entity.isMarketable},
		is_top = #{entity.isTop},
		keyword = #{entity.keyword},
		market_price = #{entity.marketPrice},
		remark = #{entity.remark},
		`name` = #{entity.name},
		price = #{entity.price},
		goods_images = #{entity.goodsImages, typeHandler=cn.bizspring.cloud.goods.admin.handler.GoodsImageHandler},
		sn = #{entity.sn},
		specification_items = #{entity.specificationItems, typeHandler=cn.bizspring.cloud.goods.admin.handler.SpecificationItemConverter},
		unit = #{entity.unit},
		weight = #{entity.weight},
		brand_id = #{entity.brandId},
		goods_category_id = #{entity.goodsCategoryId},
		store_goods_category_id = #{entity.storeGoodsCategoryId},
		introduction = #{entity.introduction}
		WHERE id = #{entity.id}
		AND version = #{entity.version};
	</update>

<!-- 移除 -->
	<delete id="delete" parameterType="java.util.List">
		<!-- 库存表 -->
		DELETE FROM biz_stock WHERE sku_id IN (SELECT id FROM biz_sku WHERE goods_id IN
		<foreach collection="ids" item="id" open="(" separator="," close="));">
			#{id}
		</foreach>

		<!-- SKU表 -->
		DELETE FROM biz_sku WHERE goods_id IN
		<foreach collection="ids" item="id" open="(" separator="," close=");">
			#{id}
		</foreach>

		<!-- 产品表 -->
		DELETE FROM biz_goods WHERE id IN
		<foreach collection="ids" item="id" open="(" separator="," close=");">
			#{id}
		</foreach>
	</delete>

	<!-- 上架商品 -->
	<update id="shelves" parameterType="java.util.List">
		UPDATE biz_goods SET is_marketable = TRUE WHERE is_marketable = FALSE AND id IN
		<foreach collection="ids" item="id" open="(" separator="," close=");">
			#{id}
		</foreach>
	</update>

	<!-- 下架商品 -->
	<update id="shelf" parameterType="java.util.List">
		UPDATE biz_goods SET is_marketable = FALSE WHERE is_marketable = TRUE AND id IN
		<foreach collection="ids" item="id" open="(" separator="," close=");">
			#{id}
		</foreach>
	</update>

</mapper>
